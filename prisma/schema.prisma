// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// UAE-specific enums
enum Emirate {
  ABU_DHABI
  DUBAI
  SHARJAH
  AJMAN
  UMM_AL_QUWAIN
  RAS_AL_KHAIMAH
  FUJAIRAH
}

enum VisaStatus {
  REQUIRED
  NOT_REQUIRED
  SPONSORED
  UNKNOWN
}

enum JobStatus {
  SAVED
  APPLIED
  INTERVIEW_SCHEDULED
  INTERVIEWED
  OFFER_RECEIVED
  REJECTED
  WITHDRAWN
}

enum Currency {
  AED
  USD
  EUR
  GBP
}

// User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  jobs          Job[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Job model with UAE-specific fields
model Job {
  id          String @id @default(cuid())
  userId      String
  
  // Basic job info
  title       String
  company     String
  description String @db.Text
  url         String?
  
  // UAE-specific fields
  emirate     Emirate?
  location    String?
  salaryMin   Int?      // In AED by default
  salaryMax   Int?      // In AED by default
  currency    Currency  @default(AED)
  
  // Visa and compliance
  visaStatus        VisaStatus @default(UNKNOWN)
  requiresEmiratesId Boolean   @default(false)
  qiwaCompliant     Boolean   @default(false)
  
  // Job tracking
  status        JobStatus @default(SAVED)
  appliedAt     DateTime?
  interviewAt   DateTime?
  responseAt    DateTime?
  
  // AI-generated content
  aiSummary     String?   @db.Text
  redFlags      String[]  // Array of red flags identified by AI
  keyPoints     String[]  // Array of key points extracted by AI
  
  // Metadata
  source        String?   // Where the job was found
  notes         String?   @db.Text
  priority      Int       @default(3) // 1-5 scale
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("jobs")
}

// Cache model for AI responses
model AICache {
  id          String   @id @default(cuid())
  
  // Hash of the input content
  contentHash String   @unique
  
  // Cached AI response
  summary     String   @db.Text
  redFlags    String[]
  keyPoints   String[]
  
  // Metadata
  model       String   // AI model used
  promptVersion String // Version of prompt used
  
  createdAt   DateTime @default(now())
  expiresAt   DateTime // Cache expiration
  
  @@map("ai_cache")
}